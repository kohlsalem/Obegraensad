//  IKEA OBERGRANSÄD KIT
    // AS INTERNET CLOCK
    
    // based on https://github.com/MakeMagazinDE/Obegraensad by DR. ARMIN ZINK
    // parts inspired by
    // By /u/frumperino
    // goodwires.org
    
    
    #include <Arduino.h>
    #include <pgmspace.h>
    
    
    #include <ESP8266mDNS.h>
    #include <ESP8266WiFi.h>  //https://github.com/esp8266/Arduino
    //needed for library
    #include <DNSServer.h>
    #include <ESP8266WebServer.h>
    #include <WiFiManager.h>  //https://github.com/tzapu/WiFiManager
    
    #include <WiFiUdp.h>
    #include <ArduinoOTA.h>  //https://github.com/esp8266/Arduino/tree/master/libraries/ArduinoOTA
    
    #include <EEPROM.h>
    
    //#define STASSID "SSID"
    //#define STAPSK  "PASS"
    WiFiUDP listener;
    ESP8266WebServer server(80);
    
    #define P_EN D5   // ORANGE
    #define P_DI D6   // YELLO
    #define P_CLK D7  // BLUE
    #define P_CLA D8  // LILA
    
    #define P_KEY D4  // ROT
    
    
    // SET YOUR TIMEZONE HERE
    #define MY_NTP_SERVER "pool.ntp.org"            // set the best fitting NTP server (pool) for your location
    #define MY_TZ "CET-1CEST,M3.5.0/02,M10.5.0/03"  // https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv
    
    
    long milToSecond;
    long milToService;
    int brightness = 100;
    uint8_t sec;
    uint8_t minute;
    uint8_t hour;
    time_t now;  // this is the epoch
    tm tm;
    
    #define TT 5  // delay for digital IO
    
    // --------------------------------------------------------------------------
    // --------------------------------------------------------------------------
    // --------------------------------------------------------------------------
    // THIS IS SYSTEM FONT FOR 6x7 Bitmaps.with FAT NUMBERS !
    
    static const uint8_t System6x7[] PROGMEM = {
    
      // Fixed width;
    
      // font data
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // (space)
      0x00, 0x00, 0x5F, 0x00, 0x00, 0x00,  // !
      0x00, 0x07, 0x00, 0x07, 0x00, 0x00,  // "
      0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00,  // #
      0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00,  // $
      0x23, 0x13, 0x08, 0x64, 0x62, 0x00,  // %
      0x36, 0x49, 0x55, 0x22, 0x50, 0x00,  // &
      0x00, 0x05, 0x03, 0x00, 0x00, 0x00,  // '
      0x00, 0x1C, 0x22, 0x41, 0x00, 0x00,  // (
      0x00, 0x41, 0x22, 0x1C, 0x00, 0x00,  // )
      0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00,  // *
      0x08, 0x08, 0x3E, 0x08, 0x08, 0x00,  // +
      0x00, 0x50, 0x30, 0x00, 0x00, 0x00,  // ,
      0x08, 0x08, 0x08, 0x08, 0x08, 0x00,  // -
      0x00, 0x60, 0x60, 0x00, 0x00, 0x00,  // .
      0x20, 0x10, 0x08, 0x04, 0x02, 0x00,  // /
    
    
      0b00111110,  // 0
      0b01111111,
      0b01100011,
      0b01100011,
      0b01111111,
      0b00111110,
    
      0b00000000,  // 1
      0b00000010,
      0b01111111,
      0b01111111,
      0b00000000,
      0b00000000,
    
      0b01100010,  // 2
      0b01110011,
      0b01111011,
      0b01101011,
      0b01101111,
      0b01100110,
    
      0b00100010,  // 3
      0b01101011,
      0b01101011,
      0b01101011,
      0b01111111,
      0b00111110,
    
      0b00000111,  // 4
      0b00001111,
      0b00001100,
      0b00001100,
      0b01111111,
      0b01111111,
    
    
      0b01101111,  // 5
      0b01101111,
      0b01101011,
      0b01101011,
      0b01111011,
      0b00110011,
    
      0b00111110,  // 6
      0b01111111,
      0b01101011,
      0b01101011,
      0b01111011,
      0b00110010,
    
      0b00000011,  // 7
      0b00000011,
      0b01111011,
      0b01111111,
      0b00000111,
      0b00000011,
    
      0b00110110,  // 8
      0b01111111,
      0b01101011,
      0b01101011,
      0b01111111,
      0b00110110,
    
      0b00100110,  // 9
      0b01101111,
      0b01101011,
      0b01101011,
      0b01111111,
      0b00111110,
    
      0x00, 0x36, 0x36, 0x00, 0x00, 0x00,  // :
      0x00, 0x56, 0x36, 0x00, 0x00, 0x00,  // ;
      0x00, 0x08, 0x14, 0x22, 0x41, 0x00,  // <
      0x14, 0x14, 0x14, 0x14, 0x14, 0x00,  // =
      0x41, 0x22, 0x14, 0x08, 0x00, 0x00,  // >
      0x02, 0x01, 0x51, 0x09, 0x06, 0x00,  // ?
      0x32, 0x49, 0x79, 0x41, 0x3E, 0x00,  // @
      0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00,  // A
      0x7F, 0x49, 0x49, 0x49, 0x36, 0x00,  // B
      0x3E, 0x41, 0x41, 0x41, 0x22, 0x00,  // C
      0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00,  // D
      0x7F, 0x49, 0x49, 0x49, 0x41, 0x00,  // E
      0x7F, 0x09, 0x09, 0x01, 0x01, 0x00,  // F
      0x3E, 0x41, 0x41, 0x51, 0x32, 0x00,  // G
      0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00,  // H
      0x00, 0x41, 0x7F, 0x41, 0x00, 0x00,  // I
      0x20, 0x40, 0x41, 0x3F, 0x01, 0x00,  // J
      0x7F, 0x08, 0x14, 0x22, 0x41, 0x00,  // K
      0x7F, 0x40, 0x40, 0x40, 0x40, 0x00,  // L
      0x7F, 0x02, 0x04, 0x02, 0x7F, 0x00,  // M
      0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00,  // N
      0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00,  // O
      0x7F, 0x09, 0x09, 0x09, 0x06, 0x00,  // P
      0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00,  // Q
      0x7F, 0x09, 0x19, 0x29, 0x46, 0x00,  // R
      0x46, 0x49, 0x49, 0x49, 0x31, 0x00,  // S
      0x01, 0x01, 0x7F, 0x01, 0x01, 0x00,  // T
      0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00,  // U
      0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00,  // V
      0x7F, 0x20, 0x18, 0x20, 0x7F, 0x00,  // W
      0x63, 0x14, 0x08, 0x14, 0x63, 0x00,  // X
      0x03, 0x04, 0x78, 0x04, 0x03, 0x00,  // Y
      0x61, 0x51, 0x49, 0x45, 0x43, 0x00,  // Z
      0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,  // [
      0x02, 0x04, 0x08, 0x10, 0x20, 0x00,  // "\"
      0x41, 0x41, 0x7F, 0x00, 0x00, 0x00,  // ]
      0x04, 0x02, 0x01, 0x02, 0x04, 0x00,  // ^
      0x40, 0x40, 0x40, 0x40, 0x40, 0x00,  // _
      0x00, 0x01, 0x02, 0x04, 0x00, 0x00,  // `
      0x20, 0x54, 0x54, 0x54, 0x78, 0x00,  // a
      0x7F, 0x48, 0x44, 0x44, 0x38, 0x00,  // b
      0x38, 0x44, 0x44, 0x44, 0x20, 0x00,  // c
      0x38, 0x44, 0x44, 0x48, 0x7F, 0x00,  // d
      0x38, 0x54, 0x54, 0x54, 0x18, 0x00,  // e
      0x08, 0x7E, 0x09, 0x01, 0x02, 0x00,  // f
      0x08, 0x14, 0x54, 0x54, 0x3C, 0x00,  // g
      0x7F, 0x08, 0x04, 0x04, 0x78, 0x00,  // h
      0x00, 0x44, 0x7D, 0x40, 0x00, 0x00,  // i
      0x20, 0x40, 0x44, 0x3D, 0x00, 0x00,  // j
      0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,  // k
      0x00, 0x41, 0x7F, 0x40, 0x00, 0x00,  // l
      0x7C, 0x04, 0x18, 0x04, 0x78, 0x00,  // m
      0x7C, 0x08, 0x04, 0x04, 0x78, 0x00,  // n
      0x38, 0x44, 0x44, 0x44, 0x38, 0x00,  // o
      0x7C, 0x14, 0x14, 0x14, 0x08, 0x00,  // p
      0x08, 0x14, 0x14, 0x18, 0x7C, 0x00,  // q
      0x7C, 0x08, 0x04, 0x04, 0x08, 0x00,  // r
      0x48, 0x54, 0x54, 0x54, 0x20, 0x00,  // s
      0x04, 0x3F, 0x44, 0x40, 0x20, 0x00,  // t
      0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00,  // u
      0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00,  // v
      0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00,  // w
      0x44, 0x28, 0x10, 0x28, 0x44, 0x00,  // x
      0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00,  // y
      0x44, 0x64, 0x54, 0x4C, 0x44, 0x00,  // z
      0x00, 0x08, 0x36, 0x41, 0x00, 0x00,  // {
      0x00, 0x00, 0x7F, 0x00, 0x00, 0x00,  // |
      0x00, 0x41, 0x36, 0x08, 0x00, 0x00,  // }
      0x08, 0x08, 0x2A, 0x1C, 0x08, 0x00,  // ->
      0x08, 0x1C, 0x2A, 0x08, 0x08, 0x00   // <-
    
    };
    
    
    // --------------------------------------------------------------------------
    // --------------------------------------------------------------------------
    // --------------------------------------------------------------------------
    
    
    // THIS IS CLASS p_panel, for freqenz and OBERGRÄNSAD IKEA Panels
    int lut[16][16] = {
      { 23, 22, 21, 20, 19, 18, 17, 16, 7, 6, 5, 4, 3, 2, 1, 0 },
      { 24, 25, 26, 27, 28, 29, 30, 31, 8, 9, 10, 11, 12, 13, 14, 15 },
      { 39, 38, 37, 36, 35, 34, 33, 32, 55, 54, 53, 52, 51, 50, 49, 48 },
      { 40, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63 },
      { 87, 86, 85, 84, 83, 82, 81, 80, 71, 70, 69, 68, 67, 66, 65, 64 },
      { 88, 89, 90, 91, 92, 93, 94, 95, 72, 73, 74, 75, 76, 77, 78, 79 },
      { 103, 102, 101, 100, 99, 98, 97, 96, 119, 118, 117, 116, 115, 114, 113, 112 },
      { 104, 105, 106, 107, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127 },
      { 151, 150, 149, 148, 147, 146, 145, 144, 135, 134, 133, 132, 131, 130, 129, 128 },
      { 152, 153, 154, 155, 156, 157, 158, 159, 136, 137, 138, 139, 140, 141, 142, 143 },
      { 167, 166, 165, 164, 163, 162, 161, 160, 183, 182, 181, 180, 179, 178, 177, 176 },
      { 168, 169, 170, 171, 172, 173, 174, 175, 184, 185, 186, 187, 188, 189, 190, 191 },
      { 215, 214, 213, 212, 211, 210, 209, 208, 199, 198, 197, 196, 195, 194, 193, 192 },
      { 216, 217, 218, 219, 220, 221, 222, 223, 200, 201, 202, 203, 204, 205, 206, 207 },
      { 231, 230, 229, 228, 227, 226, 225, 224, 247, 246, 245, 244, 243, 242, 241, 240 },
      { 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 253, 254, 255 }
    };
    
    unsigned short _pLatch;
    unsigned short _pClock;
    unsigned short _pData;
    uint8_t p_buf[16 * 16];
    
    void p_init(int p_latch, int p_clock, int p_data)  //, int bitDepth, int numPanels)
    {
    
      _pLatch = p_latch;
      _pClock = p_clock;
      _pData = p_data;
      pinMode(_pLatch, OUTPUT);
      pinMode(_pClock, OUTPUT);
      pinMode(_pData, OUTPUT);
    }
    
    
    // Clear the Panel Buffer
    void p_clear() {
      for (int i = 0; i < 256; i++) {
        p_buf[i] = 0;
      }
    }
    
    // SCAN DISPLAY, output Bytes to Serial
    void p_scan() {
    
      digitalWrite(P_EN, 255);
      uint8_t w = 0;
      uint8_t w2 = 0;
      for (int i = 0; i < 256; i++) {
        digitalWrite(_pData, 1 & p_buf[w++]);  // make count faster
        digitalWrite(_pClock, HIGH);
        delayMicroseconds(TT);
        digitalWrite(_pClock, LOW);
        w2++;
        if (w2 > 15) {
          w2 = 0;
    
          digitalWrite(_pLatch, HIGH);
          delayMicroseconds(TT);
          digitalWrite(_pLatch, LOW);
        }
      }
      digitalWrite(P_EN, 0);
    }
    
    // SET a  Pixel in Panel Buffer, calculate position from LUT
    void p_drawPixel(int8_t x, int8_t y, uint8_t color) {
      //avoid out of screen access
      if (x >= 0 && x < 16 && y >= 0 and y < 16) {
        p_buf[lut[y][x]] = color;
      }
    }
    
    
    // Draw a Char Glyph into Panel Buffer
    void p_printChar(uint8_t xs, uint8_t ys, char ch) {
      uint8_t d;
    
      for (uint8_t x = 0; x < 6; x++) {
        // get Data from Memory
        d = pgm_read_byte_near((ch - 32) * 6 + x + System6x7);
        // check which pixel to draw
        for (uint8_t y = 0; y < 7; y++) {
          uint8_t y2 = pow(2, y);
          if ((d & y2) == y2)
            p_drawPixel(x + xs, y + ys, 0xff);
          else
            p_drawPixel(x + xs, y + ys, 0x00);
        }
      }
    }
    
    // --------------------------------------------------------------------------
    // ------------------------ NTP ---------------------------------------------
    // --------------------------------------------------------------------------
    
    
    
    const char* getTimeString(void) {
      static char acTimeString[32];
      time_t now = time(nullptr);
      ctime_r(&now, acTimeString);
      size_t stLength;
      while (((stLength = strlen(acTimeString))) && ('\n' == acTimeString[stLength - 1])) {
        acTimeString[stLength - 1] = 0;  // Remove trailing line break...
      }
      return acTimeString;
    }
    
    
    
    
    void set_clock(void) {
    
      //configTime(((MY_TIMEZ) * 3600), (DST_OFFSET * 3600), "pool.ntp.org", "time.nist.gov", "time.windows.com");
      configTime(MY_TZ, MY_NTP_SERVER);  // --> Here is the IMPORTANT ONE LINER needed in your sketch!
    
    
      Serial.print("Waiting for NTP time sync: ");
      time_t now = time(nullptr);   // Secs since 01.01.1970 (when uninitialized starts with (8 * 3600 = 28800)
      while (now < 8 * 3600 * 2) {  // Wait for realistic value
    
        Serial.print(".");
        now = time(nullptr);
      }
      Serial.println("");
      Serial.printf("Current time: %s\n", getTimeString());
    }
    
    
    void set_clock_from_tm() {
      time(&now);              // read the current time
      localtime_r(&now, &tm);  // update the structure tm with the current time
    
    
      // update time from struct
      minute = tm.tm_min;
      hour = tm.tm_hour;
    }
    
    
    // Function to scroll text across the center of the screen column by column
    void scrollText(const char* text, int delayTime = 30) {
      int textWidth = strlen(text) * 6 - 1;  // Assuming 6 pixels width for each character
    
      for (int i = -16; i < textWidth; i++) {
    
        p_clear();
    
        for (int j = 0; j < strlen(text); j++) {
          int xPos = (j * 6 - i);
          if (xPos > -6 && xPos < 16) {
            p_printChar(xPos, 5, text[j]);
          }
        }
    
        p_scan();  // refreshes display
        delay(delayTime);
      }
    }
    
    
    // --------------------------------------------------------------------------
    // ----------------------SETUP ----------------------------------------------
    // --------------------------------------------------------------------------
    
    
    #define MAX_TIMEZONE_LEN 40
    #define MAX_START_TIME_LEN 4
    #define MAX_END_TIME_LEN 4
    
    
    bool isNightModeActive = false;
    
    // EEPROM-Adresse für die Parameterstruktur
    int eepromStructAddr = 0;
    
    struct ConfigParams {
      char timezone[MAX_TIMEZONE_LEN];
      char startTime[MAX_START_TIME_LEN];
      char endTime[MAX_END_TIME_LEN];
    };
    
    WiFiManager wifiManager;
    
    ConfigParams configParams;
    
    // Funktion zum Erstellen der Dropdown-Optionen
    String createDropdownOptions() {
      String options;
      for (int i = 0; i < 24 * 4; ++i) {  // 24 Stunden * 4 Viertelstunden pro Stunde
        int hours = i / 4;
        int minutes = (i % 4) * 15;
        options += "<option value=\"" + String(i) + "\">" + String(hours) + ":" + (minutes < 10 ? "0" : "") + String(minutes) + "</option>";
      }
      return options;
    }
    
    // Funktion zum Erstellen der Dropdown-Optionen für die Zeitzone
    String createTimezoneDropdown(String selectedTimezone) {
      String timezoneOptions = "<option value=\"CET-1CEST,M3.5.0/02,M10.5.0/03\">CET (Central European Time)</option>"
                               "<option value=\"UTC\">UTC (Coordinated Universal Time)</option>"
                               "<option value=\"PST8PDT,M3.2.0/02,M11.1.0/02\">PST (Pacific Standard Time)</option>"
                               "<option value=\"MST7MDT,M3.2.0/02,M11.1.0/02\">MST (Mountain Standard Time)</option>"
                               "<option value=\"EST5EDT,M3.2.0/02,M11.1.0/02\">EST (Eastern Standard Time)</option>"
                               "<option value=\"CST6CDT,M3.2.0/02,M11.1.0/02\">CST (Central Standard Time)</option>"
                               "<option value=\"CET-1CEST,M3.5.0/02,M10.5.0/03\">CET (Central European Time)</option>"
                               "<option value=\"EET-2EEST,M3.5.0/03,M10.5.0/04\">EET (Eastern European Time)</option>"
                               "<option value=\"WET0WEST,M3.5.0/01,M10.5.0/02\">WET (Western European Time)</option>"
                               "<option value=\"GMT0BST,M3.5.0/01,M10.5.0/02\">GMT (Greenwich Mean Time)</option>"
                               "<option value=\"ART-3\">ART (Argentina Time)</option>"
                               "<option value=\"AKST9AKDT,M3.2.0,M11.1.0\">AKST (Alaska Standard Time)</option>"
                               "<option value=\"AEST-10AEDT,M10.1.0,M4.1.0\">AEST (Australia Eastern Standard Time)</option>"
                               "<option value=\"ACST-9:30ACDT,M10.1.0,M4.1.0\">ACST (Australia Central Standard Time)</option>"
                               "<option value=\"AWST-8\">AWST (Australian Western Standard Time)</option>"
                               "<option value=\"IST-5:30\">IST (Indian Standard Time)</option>"
                               "<option value=\"JST-9\">JST (Japan Standard Time)</option>"
                               "<option value=\"NZST-12NZDT,M9.5.0,M4.1.0/03\">NZST (New Zealand Standard Time)</option>"
                               "<option value=\"NST-3:30NDT,M11.1.0,M3.2.0\">NST (Newfoundland Standard Time)</option>"
                               "<option value=\"PST8PDT,M3.2.0,M11.1.0\">PST (Pacific Standard Time)</option>"
                               "<option value=\"EST5EDT,M3.2.0,M11.1.0\">EST (Eastern Standard Time)</option>"
                               "<option value=\"CST6CDT,M3.2.0,M11.1.0\">CST (Central Standard Time)</option>"
                               "<option value=\"MST7MDT,M3.2.0,M11.1.0\">MST (Mountain Standard Time)</option>"
                               "<option value=\"AST4ADT,M3.2.0,M11.1.0\">AST (Atlantic Standard Time)</option>"
                               "<option value=\"NST3:30NDT,M11.1.0,M3.2.0\">NST (Newfoundland Standard Time)</option>";
    
      return "<select name='timezone'>" + timezoneOptions + "</select>";
    }
    
    /*
    void writeStructToEEPROM(int address, CustomParams &params) {
      EEPROM.put(address, params);
      EEPROM.commit();
    }*/
    
    void saveParamCallback(){
    // Hole die konfigurierten Werte
      strlcpy(configParams.timezone, WiFiManagerParameter("timezone").getValue(), MAX_TIMEZONE_LEN);
      strlcpy(configParams.startTime, WiFiManagerParameter("start_time").getValue(), MAX_START_TIME_LEN);
      strlcpy(configParams.endTime, WiFiManagerParameter("end_time").getValue(), MAX_END_TIME_LEN);
    
      
      
      EEPROM.put(eepromStructAddr, configParams);
      EEPROM.commit();
    
    }
    void setup() {
    
      
      //  vars_init();
      pinMode(P_EN, OUTPUT);
      pinMode(P_CLK, OUTPUT);
      pinMode(P_CLA, OUTPUT);
      pinMode(P_DI, OUTPUT);
    
      p_init(P_CLA, P_CLK, P_DI);
    
      Serial.begin(74880);
    
      pinMode(P_KEY, INPUT_PULLUP);
    
      analogWrite(P_EN, brightness);  // full brightness
      p_clear();
      p_scan();
    
    
       // Dropdown-Optionen für die Zeitzone
     
      EEPROM.get(eepromStructAddr, configParams);  
      String timezoneOptions = createTimezoneDropdown(configParams.timezone);
      WiFiManagerParameter custom_timezone("timezone", "Timezone", timezoneOptions.c_str(), 100);
    
      // Dropdown-Optionen für Startzeit
     String startOptions = "<option value='0'>00:00</option>"
                            "<option value='15'>00:15</option>"
                            "<option value='30'>00:30</option>"
                            "<option value='45'>00:45</option>"
                            "<option value='60'>01:00</option>"
                            "<option value='75'>01:15</option>"
                            "<option value='90'>01:30</option>"
                            "<option value='105'>01:45</option>"
                            "<option value='120'>02:00</option>"
                            "<option value='135'>02:15</option>"
                            "<option value='150'>02:30</option>"
                            "<option value='165'>02:45</option>"
                            "<option value='180'>03:00</option>"
                            "<option value='195'>03:15</option>"
                            "<option value='210'>03:30</option>"
                            "<option value='225'>03:45</option>"
                            "<option value='240'>04:00</option>"
                            "<option value='255'>04:15</option>"
                            "<option value='270'>04:30</option>"
                            "<option value='285'>04:45</option>"
                            "<option value='300'>05:00</option>"
                            "<option value='315'>05:15</option>"
                            "<option value='330'>05:30</option>"
                            "<option value='345'>05:45</option>"
                            "<option value='360'>06:00</option>"
                            "<option value='375'>06:15</option>"
                            "<option value='390'>06:30</option>"
                            "<option value='405'>06:45</option>"
                            "<option value='420'>07:00</option>"
                            "<option value='435'>07:15</option>"
                            "<option value='450'>07:30</option>"
                            "<option value='465'>07:45</option>"
                            "<option value='480'>08:00</option>"
                            "<option value='495'>08:15</option>"
                            "<option value='510'>08:30</option>"
                            "<option value='525'>08:45</option>"
                            "<option value='540'>09:00</option>"
                            "<option value='555'>09:15</option>"
                            "<option value='570'>09:30</option>"
                            "<option value='585'>09:45</option>"
                            "<option value='600'>10:00</option>"
                            "<option value='615'>10:15</option>"
                            "<option value='630'>10:30</option>"
                            "<option value='645'>10:45</option>"
                            "<option value='660'>11:00</option>"
                            "<option value='675'>11:15</option>"
                            "<option value='690'>11:30</option>"
                            "<option value='705'>11:45</option>"
                            "<option value='720'>12:00</option>"
                            "<option value='735'>12:15</option>"
                            "<option value='750'>12:30</option>"
                            "<option value='765'>12:45</option>"
                            "<option value='780'>13:00</option>"
                            "<option value='795'>13:15</option>"
                            "<option value='810'>13:30</option>"
                            "<option value='825'>13:45</option>"
                            "<option value='840'>14:00</option>"
                            "<option value='855'>14:15</option>"
                            "<option value='870'>14:30</option>"
                            "<option value='885'>14:45</option>"
                            "<option value='900'>15:00</option>"
                            "<option value='915'>15:15</option>"
                            "<option value='930'>15:30</option>"
                            "<option value='945'>15:45</option>"
                            "<option value='960'>16:00</option>"
                            "<option value='975'>16:15</option>"
                            "<option value='990'>16:30</option>"
                            "<option value='1005'>16:45</option>"
                            "<option value='1020'>17:00</option>"
                            "<option value='1035'>17:15</option>"
                            "<option value='1050'>17:30</option>"
                            "<option value='1065'>17:45</option>"
                            "<option value='1080'>18:00</option>"
                            "<option value='1095'>18:15</option>"
                            "<option value='1110'>18:30</option>"
                            "<option value='1125'>18:45</option>"
                            "<option value='1140'>19:00</option>"
                            "<option value='1155'>19:15</option>"
                            "<option value='1170'>19:30</option>"
                            "<option value='1185'>19:45</option>"
                            "<option value='1200'>20:00</option>"
                            "<option value='1215'>20:15</option>"
                            "<option value='1230'>20:30</option>"
                            "<option value='1245'>20:45</option>"
                            "<option value='1260'>21:00</option>"
                            "<option value='1275'>21:15</option>"
                            "<option value='1290'>21:30</option>"
                            "<option value='1305'>21:45</option>"
                            "<option value='1320'>22:00</option>"
                            "<option value='1335'>22:15</option>"
                            "<option value='1350'>22:30</option>"
                            "<option value='1365'>22:45</option>"
                            "<option value='1380'>23:00</option>"
                            "<option value='1395'>23:15</option>"
                            "<option value='1410'>23:30</option>"
                            "<option value='1425'>23:45</option>";
    
      WiFiManagerParameter custom_start_time("start_time", "Start Time", startOptions.c_str(), 5);
    
      // Dropdown-Optionen für Endzeit
      String endOptions = startOptions;
      
      WiFiManagerParameter custom_end_time("end_time", "End Time", endOptions.c_str(), 5);
    
      // Füge die Parameter dem WiFi-Manager hinzu
      wifiManager.addParameter(&custom_timezone);
      wifiManager.addParameter(&custom_start_time);
      wifiManager.addParameter(&custom_end_time);
      wifiManager.setSaveParamsCallback(saveParamCallback);
    
      //fetches ssid and pass from eeprom and tries to connect
      //if it does not connect it starts an access point with the specified name
      //here  "OBERGRAENSAD"
      //and goes into a blocking loop awaiting configuration
      wifiManager.autoConnect("OBERGRAENSAD");
    
      // start network
      // WiFi.mode(WIFI_STA);
      // WiFi.begin(STASSID, STAPSK);
    
      while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
      }
    
      EEPROM.get(eepromStructAddr, configParams);
     
      //if you get here you have connected to the WiFi
      Serial.println("Wifi connected!");
      scrollText("Wifi connected!");
    
      // initialize OTA update
      // in case, debug output can be placed in the stubs
      ArduinoOTA.setHostname("       ");
      ArduinoOTA.onStart([]() {});
      ArduinoOTA.onEnd([]() {});
      ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {});
      ArduinoOTA.onError([](ota_error_t error) {});
      ArduinoOTA.begin();
      ArduinoOTA.setPassword("keines");
    
    
      // Sync clock
      set_clock();
      set_clock_from_tm();
    }
    
    
    
    // --------------------------------------------------------------------------
    // ---------------------- LOOP ----------------------------------------------
    // --------------------------------------------------------------------------
    
    void loop() {
    
      // Every other time - Service the net
      if (millis() > milToService + 100) {
        milToService = millis();
        ArduinoOTA.handle();
        server.handleClient();
      }
    
      // JEDE  SEKUNDE
      if (millis() > milToSecond + 1000) {
        milToSecond = millis();
        // PRINT THE TIME
    
    
    
    
    
        // JEDE MINUTE
        sec++;
        // every minute set the time
        if (sec > 60) {
          sec = 0;
          set_clock_from_tm();
          set_clock();
    
          p_printChar(2, 0, (hour / 10) + 48);
          p_printChar(9, 0, (hour % 10) + 48);
          p_printChar(2, 9, (minute / 10) + 48);
          p_printChar(9, 9, (minute % 10) + 48);
          p_scan();  // refreshes display
        }
        for (uint8_t x = 0; x < 16; x++) {
          p_drawPixel(x, 7, 0x00);
          p_drawPixel(x, 8, 0x00);
        }
        if ((sec * 32 / 60) % 2 == 0) p_drawPixel(sec * 16 / 60, 7, 0xff);
        else p_drawPixel(sec * 16 / 60, 8, 0xff);
    
        if (((hour >= 22) && (minute >= 30)) || ((hour <= 6) && (minute <= 30))) { // Night mode
          p_clear();
          p_scan();
          delay(10000);
        } else {
          // refresh only if the pixel did change
          if (((sec * 32 / 60) > ((sec - 1) * 32 / 60)) || !sec) p_scan();  // refreshes display
        }
        Serial.printf("Current time: %s\n", getTimeString());
      }
    
    
      // TASTE
      if (digitalRead(P_KEY) == 0) {
        brightness += 50;
        if (brightness > 200) brightness = 0;
        analogWrite(P_EN, brightness);  // full brightness
        delay(500);
        scrollText("Wifi connected!");
      }
    }
